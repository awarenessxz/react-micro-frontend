{
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
        "node": true,
        "jest": true
    },
    "parser": "@typescript-eslint/parser", // Specifies the ESLint parser
    "parserOptions": {
        "ecmaVersion": 2020, // Allows the parsing of modern ECMAScript features
        "sourceType": "module", // Allows the use of imports
        "ecmaFeatures": {
            "jsx": true // Allows for parsing of JSX
        },
        "project": "./tsconfig.eslint.json"
    },
    "settings": {
        "react": {
            "pragma": "React",
            "version": "detect" // Tells eslint-plugin-react to automatically detect the version of React to use
        },
        "import/resolver": {
            "node": {
                "paths": ["src/"],
                "extensions": [".ts", ".tsx", ".mdx"]
            }
        },
        "import/extensions": [".ts", ".tsx", ".mdx"],
        "import/parsers": {
            "@typescript-eslint/parser": [".ts", ".tsx", ".mdx"]
        },
        "import/core-modules": [],
        "import/ignore": ["node_modules", "\\.(coffee|scss|css|less|hbs|svg|json)$"]
    },
    "extends": [
        "airbnb-typescript/base",
        "plugin:react/recommended", // Uses the recommended rules from @eslint-plugin-react
        "plugin:react-hooks/recommended", // Uses the recommended rules from eslint-config-react-hooks
        "plugin:@typescript-eslint/recommended", // Uses the recommended rules from @typescript-eslint/eslint-plugin
        "plugin:@typescript-eslint/recommended-requiring-type-checking", // contains rules that specifically require type information.
        "prettier/@typescript-eslint", // Uses eslint-config-prettier to disable ESlint rules from @typescript-eslint/eslint-plugin that would conflict with prettier
        "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESlint errors. Make sure this is always the last configuration in the extends array
    ],
    "plugins": ["@typescript-eslint"],
    "rules": {
        // place to sepcify ESlint rules
        // AirBnB
        "react/jsx-filename-extension": [1, { "extensions": [".tsx", "jsx"] }], // drops extensions checks for JSX in javascript project
        "react/prefer-stateless-function": [2, { "ignorePureComponents": true }],
        "react-hooks/rules-of-hooks": "error", // checks rules of hooks
        "react-hooks/exhaustive-deps": "error", // checks effect dependencies
        "jsx-a11y/no-static-element-interactions": "off", // See ARIA rules. However, severity decreased from error->warn instead
        "jsx-a11y/no-noninteractive-element-interactions": "off",
        "jsx-a11y/label-has-for": "off",
        "jsx-a11y/anchor-is-valid": "off",
        // Assume user without physical disabilities. If required, then we need to enable key events and enable the follow rules
        "jsx-a11y/click-events-have-key-events": "off",
        "jsx-a11y/mouse-events-have-key-events": "off",
        "jsx-a11y/interactive-supports-focus": "off",
        "import/extensions": ["error", "ignorePackages", { "ts": "never", "tsx": "never" }], // do not require extensions for imports
        // eslint
        "no-underscore-dangle": "off",
        "no-console": "off",
        "linebreak-style": "off",
        "no-param-reassign": "error",
        "no-empty-function": "off",
        "import/no-extraneous-dependencies": ["error", {"devDependencies": true, "optionalDependencies": true, "peerDependencies": true}],
        // typescript rules
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error", { "args": "none" }],
        "no-extra-semi": "off",
        "@typescript-eslint/no-extra-semi": ["error"],
        "semi": "off",
        "@typescript-eslint/semi": ["error", "always"],
        "brace-style": "off",
        "@typescript-eslint/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
        "@typescript-eslint/explicit-function-return-type": "warn",
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-explicit-any": ["warn", { "ignoreRestArgs": true }] // decrease severity to warn instead of error to allow using of 'any' type
    }
}
